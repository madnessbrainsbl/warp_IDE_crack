# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ Warp Terminal Fix
# –¢—Ä–µ–±—É–µ—Ç –∑–∞–ø—É—Å–∫–∞ –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

#Requires -RunAsAdministrator

param(
    [switch]$ResetNetwork,
    [switch]$RestoreFromBackup,
    [string]$BackupPath = "",
    [string]$LogFile = "$env:TEMP\warp-restore-$(Get-Date -Format 'yyyyMMdd-HHmmss').log"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–≤–æ–¥–∞
$Host.UI.RawUI.WindowTitle = "Warp Terminal Restore - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function Write-Log {
    param([string]$Message, [string]$Level = "INFO")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logEntry = "[$timestamp] [$Level] $Message"
    Write-Host $logEntry -ForegroundColor $(switch($Level) {
        "ERROR" { "Red" }
        "WARN" { "Yellow" }
        "SUCCESS" { "Green" }
        "RESTORE" { "Cyan" }
        default { "White" }
    })
    Add-Content -Path $LogFile -Value $logEntry -ErrorAction SilentlyContinue
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –±—ç–∫–∞–ø–æ–≤
function Find-WarpBackups {
    Write-Log "–ü–æ–∏—Å–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π Warp..." "RESTORE"
    
    $backupFolders = Get-ChildItem -Path $env:TEMP -Directory -Filter "warp-backup-*" -ErrorAction SilentlyContinue | 
                     Sort-Object CreationTime -Descending
    
    if ($backupFolders) {
        Write-Log "–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: $($backupFolders.Count)" "SUCCESS"
        foreach ($folder in $backupFolders) {
            Write-Log "  üìÅ $($folder.Name) - $($folder.CreationTime)" "INFO"
        }
        return $backupFolders
    } else {
        Write-Log "‚ùå –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ $env:TEMP" "WARN"
        return $null
    }
}

# –§—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –±—ç–∫–∞–ø–∞
function Restore-WarpFromBackup {
    param([string]$SelectedBackupPath)
    
    if (-not $SelectedBackupPath) {
        $backups = Find-WarpBackups
        if (-not $backups) { return $false }
        $SelectedBackupPath = $backups[0].FullName
        Write-Log "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø: $SelectedBackupPath" "RESTORE"
    }
    
    if (-not (Test-Path $SelectedBackupPath)) {
        Write-Log "‚ùå –ü—É—Ç—å –∫ –±—ç–∫–∞–ø—É –Ω–µ –Ω–∞–π–¥–µ–Ω: $SelectedBackupPath" "ERROR"
        return $false
    }
    
    Write-Log "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Warp –∏–∑ –±—ç–∫–∞–ø–∞..." "RESTORE"
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Warp –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    Get-Process -Name "warp*" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
    Start-Sleep -Seconds 2
    
    $restored = 0
    $backupContents = Get-ChildItem -Path $SelectedBackupPath -Directory
    
    foreach ($folder in $backupContents) {
        $targetPath = switch ($folder.Name) {
            "Warp" { 
                if (Test-Path "$env:APPDATA\Warp") { "$env:APPDATA\Warp" }
                elseif (Test-Path "$env:LOCALAPPDATA\Warp") { "$env:LOCALAPPDATA\Warp" }
                else { "$env:APPDATA\Warp" }
            }
            ".warp" { "$env:USERPROFILE\.warp" }
            default { $null }
        }
        
        if ($targetPath) {
            try {
                # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
                if (Test-Path $targetPath) {
                    Remove-Item $targetPath -Recurse -Force -ErrorAction Stop
                }
                
                # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞
                Copy-Item $folder.FullName $targetPath -Recurse -Force -ErrorAction Stop
                Write-Log "‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: $targetPath" "SUCCESS"
                $restored++
            } catch {
                Write-Log "‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è $targetPath : $($_.Exception.Message)" "ERROR"
            }
        }
    }
    
    Write-Log "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–∞–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫: $restored" "SUCCESS"
    return $restored -gt 0
}

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞
function Remove-WarpFirewallRules {
    Write-Log "–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞ Warp..." "RESTORE"
    
    $ruleNames = @(
        "Warp Terminal Out",
        "Warp Terminal In", 
        "Warp HTTPS",
        "Warp HTTP"
    )
    
    $removed = 0
    foreach ($ruleName in $ruleNames) {
        try {
            $rule = Get-NetFirewallRule -DisplayName $ruleName -ErrorAction SilentlyContinue
            if ($rule) {
                Remove-NetFirewallRule -DisplayName $ruleName -ErrorAction Stop
                Write-Log "‚úÖ –£–¥–∞–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ: $ruleName" "SUCCESS"
                $removed++
            } else {
                Write-Log "‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: $ruleName" "INFO"
            }
        } catch {
            Write-Log "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ $ruleName : $($_.Exception.Message)" "ERROR"
        }
    }
    
    Write-Log "–£–¥–∞–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞: $removed" "SUCCESS"
}

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π Windows Defender
function Remove-WarpDefenderExclusions {
    Write-Log "–£–¥–∞–ª–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π Windows Defender..." "RESTORE"
    
    $exclusions = @{
        "Process" = @("warp.exe")
        "Path" = @(
            "$env:LOCALAPPDATA\Programs\Warp",
            "$env:APPDATA\Warp"
        )
    }
    
    $removed = 0
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    foreach ($process in $exclusions.Process) {
        try {
            Remove-MpPreference -ExclusionProcess $process -ErrorAction Stop
            Write-Log "‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞: $process" "SUCCESS"
            $removed++
        } catch {
            Write-Log "‚ÑπÔ∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ—à–∏–±–∫–∞: $process" "INFO"
        }
    }
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—É—Ç–µ–π
    foreach ($path in $exclusions.Path) {
        try {
            Remove-MpPreference -ExclusionPath $path -ErrorAction Stop
            Write-Log "‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—É—Ç–∏: $path" "SUCCESS"
            $removed++
        } catch {
            Write-Log "‚ÑπÔ∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—É—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ—à–∏–±–∫–∞: $path" "INFO"
        }
    }
    
    Write-Log "–£–¥–∞–ª–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–π Defender: $removed" "SUCCESS"
}

# –§—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è DNS
function Restore-DNSSettings {
    Write-Log "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ DNS –Ω–∞—Å—Ç—Ä–æ–µ–∫..." "RESTORE"
    
    $adapters = Get-NetAdapter | Where-Object {$_.Status -eq "Up"}
    $restored = 0
    
    foreach ($adapter in $adapters) {
        try {
            # –°–±—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ DNS
            Set-DnsClientServerAddress -InterfaceIndex $adapter.InterfaceIndex -ResetServerAddresses -ErrorAction Stop
            Write-Log "‚úÖ DNS —Å–±—Ä–æ—à–µ–Ω –¥–ª—è –∞–¥–∞–ø—Ç–µ—Ä–∞: $($adapter.Name)" "SUCCESS"
            $restored++
        } catch {
            Write-Log "‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ DNS –¥–ª—è $($adapter.Name): $($_.Exception.Message)" "ERROR"
        }
    }
    
    # –û—á–∏—Å—Ç–∫–∞ DNS –∫—ç—à–∞
    try {
        ipconfig /flushdns | Out-Null
        Write-Log "‚úÖ DNS –∫—ç—à –æ—á–∏—â–µ–Ω" "SUCCESS"
    } catch {
        Write-Log "‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ DNS –∫—ç—à–∞" "ERROR"
    }
    
    Write-Log "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ DNS –¥–ª—è –∞–¥–∞–ø—Ç–µ—Ä–æ–≤: $restored" "SUCCESS"
}

# –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ —Å–µ—Ç–µ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
function Reset-NetworkStack {
    if (-not $ResetNetwork) {
        $reset = Read-Host "–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–µ—Ç–µ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫? (–º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å —Å–µ—Ç—å—é) [y/N]"
        if ($reset -ne 'y' -and $reset -ne 'Y') {
            Write-Log "–°–±—Ä–æ—Å —Å–µ—Ç–µ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω" "INFO"
            return
        }
    }
    
    Write-Log "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ —Å–µ—Ç–µ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫..." "RESTORE"
    
    $commands = @{
        "Winsock" = "netsh winsock reset"
        "TCP/IP v4" = "netsh interface ipv4 reset"
        "TCP/IP v6" = "netsh interface ipv6 reset"
    }
    
    foreach ($desc in $commands.Keys) {
        try {
            Invoke-Expression $commands[$desc] | Out-Null
            Write-Log "‚úÖ –°–±—Ä–æ—à–µ–Ω–æ: $desc" "SUCCESS"
        } catch {
            Write-Log "‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ $desc : $($_.Exception.Message)" "ERROR"
        }
    }
    
    Write-Log "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π" "WARN"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
function Test-SystemAfterRestore {
    Write-Log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è..." "RESTORE"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    try {
        $connection = Test-NetConnection -ComputerName "8.8.8.8" -Port 53 -WarningAction SilentlyContinue -InformationLevel Quiet
        if ($connection) {
            Write-Log "‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç" "SUCCESS"
        } else {
            Write-Log "‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º" "ERROR"
        }
    } catch {
        Write-Log "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è" "ERROR"
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS
    try {
        $dnsTest = Resolve-DnsName "google.com" -ErrorAction Stop
        Write-Log "‚úÖ DNS —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ" "SUCCESS"
    } catch {
        Write-Log "‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º" "ERROR"
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Warp
    $warpPaths = @(
        "$env:APPDATA\Warp",
        "$env:LOCALAPPDATA\Warp", 
        "$env:USERPROFILE\.warp"
    )
    
    $foundWarp = 0
    foreach ($path in $warpPaths) {
        if (Test-Path $path) {
            Write-Log "‚úÖ –ù–∞–π–¥–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Warp: $path" "SUCCESS"
            $foundWarp++
        }
    }
    
    if ($foundWarp -eq 0) {
        Write-Log "‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Warp –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)" "INFO"
    }
}

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
function Clean-TempFiles {
    Write-Log "–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..." "RESTORE"
    
    $patterns = @(
        "$env:TEMP\warp-installer-*.exe",
        "$env:TEMP\Warp*"
    )
    
    $cleaned = 0
    foreach ($pattern in $patterns) {
        $files = Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue
        foreach ($file in $files) {
            try {
                Remove-Item $file.FullName -Force -Recurse -ErrorAction Stop
                Write-Log "‚úÖ –£–¥–∞–ª–µ–Ω: $($file.Name)" "SUCCESS"
                $cleaned++
            } catch {
                Write-Log "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: $($file.Name)" "WARN"
            }
        }
    }
    
    Write-Log "–û—á–∏—â–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: $cleaned" "SUCCESS"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
function Start-WarpRestore {
    Write-Host @"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                üîÑ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ü–û–°–õ–ï WARP FIX üîÑ                  ‚ïë
‚ïë                            –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π                                   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"@ -ForegroundColor Cyan

    Write-Log "–ó–∞–ø—É—Å–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã..." "RESTORE"
    Write-Log "–õ–æ–≥-—Ñ–∞–π–ª: $LogFile" "INFO"
    
    # –≠—Ç–∞–ø 1: –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞
    Write-Host "`n[1/7] –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞..." -ForegroundColor Yellow
    Remove-WarpFirewallRules
    
    # –≠—Ç–∞–ø 2: –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π Defender
    Write-Host "`n[2/7] –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π Windows Defender..." -ForegroundColor Yellow
    Remove-WarpDefenderExclusions
    
    # –≠—Ç–∞–ø 3: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ DNS
    Write-Host "`n[3/7] –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ DNS –Ω–∞—Å—Ç—Ä–æ–µ–∫..." -ForegroundColor Yellow
    Restore-DNSSettings
    
    # –≠—Ç–∞–ø 4: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Warp
    Write-Host "`n[4/7] –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Warp..." -ForegroundColor Yellow
    if ($RestoreFromBackup -or $BackupPath) {
        $restored = Restore-WarpFromBackup -SelectedBackupPath $BackupPath
        if (-not $restored) {
            Write-Log "‚ö†Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å" "WARN"
        }
    } else {
        Write-Log "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Warp –ø—Ä–æ–ø—É—â–µ–Ω–æ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ -RestoreFromBackup)" "INFO"
        Find-WarpBackups | Out-Null
    }
    
    # –≠—Ç–∞–ø 5: –°–±—Ä–æ—Å —Å–µ—Ç–µ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    Write-Host "`n[5/7] –°–±—Ä–æ—Å —Å–µ—Ç–µ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫..." -ForegroundColor Yellow
    Reset-NetworkStack
    
    # –≠—Ç–∞–ø 6: –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    Write-Host "`n[6/7] –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..." -ForegroundColor Yellow
    Clean-TempFiles
    
    # –≠—Ç–∞–ø 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    Write-Host "`n[7/7] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã..." -ForegroundColor Yellow
    Test-SystemAfterRestore
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    Write-Host "`n" + "="*79 -ForegroundColor Green
    Write-Host "                        üéâ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û! üéâ" -ForegroundColor Green
    Write-Host "="*79 -ForegroundColor Green
    
    Write-Host @"

‚úÖ –í–´–ü–û–õ–ù–ï–ù–û:
‚Ä¢ –£–¥–∞–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞ Warp
‚Ä¢ –£–¥–∞–ª–µ–Ω—ã –∏—Å–∫–ª—é—á–µ–Ω–∏—è Windows Defender
‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ DNS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
‚Ä¢ –û—á–∏—â–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã

üîÑ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
‚Ä¢ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
‚Ä¢ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Warp —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞

üìã –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $LogFile

"@ -ForegroundColor Cyan

    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    $reboot = Read-Host "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä —Å–µ–π—á–∞—Å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π? (Y/N)"
    if ($reboot -eq 'Y' -or $reboot -eq 'y') {
        Write-Log "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã..." "RESTORE"
        Restart-Computer -Force
    } else {
        Write-Host "‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–∑–∂–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è" -ForegroundColor Yellow
    }
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
try {
    Start-WarpRestore
} catch {
    Write-Log "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: $($_.Exception.Message)" "ERROR"
    Write-Log "–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏: $($_.Exception.StackTrace)" "ERROR"
    Write-Host "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥: $LogFile" -ForegroundColor Red
}

Write-Host "`n–°–∫—Ä–∏–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞..." -ForegroundColor Gray
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
